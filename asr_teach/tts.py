# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/04_tts.ipynb.

# %% auto 0
__all__ = ['DEFAULT_LANG', 'DEFAULT_GENDER', 'DEFAULT_FMT', 'DEFAULT_NAME', 'TTS', 'GoogleTTS']

# %% ../nbs/04_tts.ipynb 1
from google.cloud import texttospeech
from fastcore.basics import store_attr
from IPython.display import Audio

# %% ../nbs/04_tts.ipynb 4
from .utils import SAMPLE_RATE

# %% ../nbs/04_tts.ipynb 5
class TTS:
    pass

# %% ../nbs/04_tts.ipynb 6
# defaults for google TTS
DEFAULT_LANG = 'en-GB'
# default speaker gender
DEFAULT_GENDER = texttospeech.SsmlVoiceGender.MALE
# default audio format (wav)
DEFAULT_FMT = texttospeech.AudioEncoding.LINEAR16 #MP# 
# default voice name
DEFAULT_NAME = 'en-GB-Neural2-B'


class GoogleTTS(TTS):
    def __init__(self,
                 language: str = DEFAULT_LANG,
                 gender: str = DEFAULT_GENDER,
                 output_fmt: str = DEFAULT_FMT,
                 voice_name: str = DEFAULT_NAME,
                 sample_rate: int = SAMPLE_RATE,
                ):
        store_attr()
        
        # Instantiates a client
        self.client = texttospeech.TextToSpeechClient()

        # default voice to synthesize
        self.voice = texttospeech.VoiceSelectionParams(
            language_code=language,
            ssml_gender=gender,
            name=voice_name,
        )

        # Select the type of audio file you want returned
        self.audio_config = texttospeech.AudioConfig(
            audio_encoding=output_fmt,
            sample_rate_hertz=sample_rate,
        )

        # text to be synthesized
        self.txt = ''
    
    
    def set_text(self, txt):
        '''Sets the text to be synthetically spoken.
        '''
        self.txt = texttospeech.SynthesisInput(text=txt)
        
        
    def synthesize(self):
        '''Performs the text-to-speech request on the text input.
        '''
        response = self.client.synthesize_speech(
            input=self.txt,
            voice=self.voice,
            audio_config=self.audio_config)
        self.response = response
            
            
    def wav2array(self, header_sz: int = 16):
        '''Converts the synthetic wav to a numpy array, skipping the header.
        '''
        data = self.response.audio_content
        arr = np.frombuffer(data,
                            dtype=np.int16,
                            count=len(data)//2 - header_sz,
                            offset=header_sz)
        return arr
    
        
    def play(self):
        '''Plays the generated wav with ipython.
        '''
        audio = self.wav2array()
        return Audio(audio, rate=self.sample_rate)
        
