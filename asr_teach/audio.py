# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_audio.ipynb.

# %% auto 0
__all__ = ['AudioBuffer']

# %% ../nbs/00_audio.ipynb 2
import numpy as np

# %% ../nbs/00_audio.ipynb 3
from .utils import SAMPLE_RATE, BUFFER_SECONDS, DTYPE

# %% ../nbs/00_audio.ipynb 4
class AudioBuffer:
    '''Buffers a numpy array of audio streaming from a socket.
    '''
    def __init__(self,
                 size=SAMPLE_RATE * BUFFER_SECONDS, 
                 dtype=DTYPE):
        
        # initialize the data buffer
        self.size = size
        self.data = []
        
        # holds leftover samples
        self.rem = [] 
        
        # flag for when the buffer is full
        self.is_full = False 

        
    def accumulate(self, data: np.ndarray):
        '''Reads in and buffers the incoming `data`.
        '''
        # number of incoming samples
        num_samples = len(data)
        
        if len(self.data) >= self.size:
            self.is_full = True
            self.rem.extend(self.data[self.size:])
            self.data = self.data[:self.size]
        else:
            self.data.extend(data)
            
            
    def get_data(self):
        '''Returns the data buffer.
        '''
        return self.data
    
    
    def reset(self):
        '''Resets buffer head for new, incoming data.
        '''
        self.rem, self.data = [], self.rem

